{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__notOwner();\n\n/** @title A contract for crowd funding\n *  @author Me\n *  @notice This contract is to demo a sample funding contract\n *  @dev This implements price feeds as our library\n */\n\ncontract FundMe {\n  // Type Declarations\n  using PriceConverter for uint256;\n\n  // State Variables\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\n  address[] private s_funders;\n  mapping(address => uint256) private s_addressToAmountFunded;\n  address private immutable i_owner;\n  AggregatorV3Interface private s_priceFeed;\n\n  modifier onlyOwner() {\n    // require(i_owner == msg.sender, \"You cannot withdraw as you are not the owner of this contract\");\n    if (msg.sender != i_owner) {\n      revert FundMe__notOwner();\n    }\n    _;\n  }\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  // receive() external payable {\n  //   fund();\n  // }\n\n  // fallback() external payable {\n  //   fund();\n  // }\n\n/**\n *  @notice This function funds this contract\n *  @dev This implements price feeds as our library\n *  \n */\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n      \"Didn't send enough!\"\n    );\n    s_funders.push(msg.sender);\n    s_addressToAmountFunded[msg.sender] = msg.value;\n  }\n\n  function withdraw() public onlyOwner {\n    for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\n      address funder = s_funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n\n    //transfer\n    // payable(msg.sender).transfer(address(this).balance);\n\n    //send\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send failed\");\n\n    //call\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  function cheaperWithdraw() public payable onlyOwner{\n    address[] memory funders = s_funders;\n    for(uint i = 0; i < funders.length; i++){\n      address funder = funders[i];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address [](0);\n    (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n    require(success);\n  }\n\n  function getOwner()public view returns(address){\n    return i_owner;\n  }\n\n  function getFunders(uint256 index)public view returns(address){\n    return s_funders[index];\n  }\n\n  function getAddressToAmountFunded(address funder) public view returns(uint){\n    return s_addressToAmountFunded[funder];\n  }\n\n  function getPriceFeed() public view returns(AggregatorV3Interface){\n    return s_priceFeed;\n  }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        //ABI\n        // //Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        //ETH in USD\n        return uint256(price * 1e10); //1**10 == 10000000000\n    }\n\n    // function getVersion() internal view returns (uint256){\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd  = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}